generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  totalPoints   Int?           @default(0)
  claimedPoints Int?           @default(0)
  password      String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  status        UserStatus     @default(deactivated)
  role          UserRole       @default(client)
  idBusiness    String?
  accounts      Account[]
  claimedPrize  ClaimedPrize[]
  sessions      Session[]
  business      Business?      @relation(fields: [idBusiness], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProductType {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Product   Product?
}

model Product {
  id           String         @id @default(cuid())
  name         String
  idBussiness  String
  description  String
  imageUrl     String
  typeId       String         @unique
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  type         ProductType    @relation(fields: [typeId], references: [id])
  ProductPrize ProductPrize[]
}

model Prize {
  id           String         @id @default(cuid())
  name         String
  idBussiness  Int
  description  String
  imageUrl     String
  points       Int
  enabled      Boolean        @default(true)
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  ClaimedPrize ClaimedPrize[]
  ProductPrize ProductPrize[]
}

model ProductPrize {
  id        String   @id @default(cuid())
  idPrize   String
  idProduct String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  prize     Prize    @relation(fields: [idPrize], references: [id])
  product   Product  @relation(fields: [idProduct], references: [id])
}

model ClaimedPrize {
  id        String   @id @default(cuid())
  idPrize   String
  idUser    String
  idUserS   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  prize     Prize    @relation(fields: [idPrize], references: [id])
  user      User     @relation(fields: [idUser], references: [id])
}

model Sport {
  id        String   @id @default(cuid())
  name      String   @unique
  abbrName  String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model League {
  id        String   @id @default(cuid())
  name      String   @unique
  abbrName  String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Team {
  id        String      @id @default(cuid())
  name      String      @unique
  abbrName  String      @unique
  logoUrl   String
  colors    String[]
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  TeamEvent TeamEvent[]
  events    Event[]     @relation("teamEvents")
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  startTime   DateTime
  leagueId    Int
  sportId     Int
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  status      EventStatus
  TeamEvent   TeamEvent[]
  teams       Team[]      @relation("teamEvents")
}

model TeamEvent {
  id        String   @id @default(cuid())
  teamId    String
  eventId   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  event     Event    @relation(fields: [eventId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, eventId])
}

model Forecast {
  id         String         @id @default(cuid())
  idBusiness String
  idClient   Int
  idEvent    Int
  date       DateTime
  status     ForecastStatus
  team1Score Int
  team2Score Int
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")
  business   Business       @relation(fields: [idBusiness], references: [id])
}

model Business {
  id                  String                @id @default(cuid())
  name                String
  type                BusinessTypes
  logoUrl             String
  description         String
  coverImageUrl       String
  country             String
  province            String
  canton              String
  district            String
  address             String
  wazeLink            String?
  googleMapLink       String?
  facebookLink        String?
  instagramLink       String?
  xLink               String?
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  BusinessAdvertising BusinessAdvertising[]
  BusinessGallery     BusinessGallery[]
  BusinessScheduled   BusinessScheduled[]
  Forecast            Forecast[]
  User                User[]
}

model BusinessScheduled {
  id               String   @id @default(cuid())
  idBusiness       String
  mondayOpening    Int?
  mondayClose      Int?
  tuesdayOpening   Int?
  tuesdayClose     Int?
  wednesdayOpening Int?
  wednesdayClose   Int?
  thursdayOpening  Int?
  thursdayClose    Int?
  fridayOpening    Int?
  fridayClose      Int?
  saturdayOpening  Int?
  saturdayClose    Int?
  sundayOpening    Int?
  sundayClose      Int?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  business         Business @relation(fields: [idBusiness], references: [id])
}

model BusinessGallery {
  id         String   @id @default(cuid())
  idBusiness String
  ord        Int?
  imageUrl   String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  business   Business @relation(fields: [idBusiness], references: [id])
}

model BusinessAdvertising {
  id         String    @id @default(cuid())
  idBusiness String
  title      String
  imageUrl   String
  href       String?
  priority   Int?
  enabled    Boolean   @default(true)
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  business   Business  @relation(fields: [idBusiness], references: [id])
}

enum UserRole {
  unknown
  client
  master
  admin_rest
  cashier_rest
  waiter_rest
  bartender_rest
}

enum UserStatus {
  unknown
  actived
  suspented
  deactivated
}

enum EventStatus {
  incoming
  live
  finished
  canceled
  pending
  postponed
}

enum ForecastStatus {
  pending
  canceled
  completed
  lost
  won
}

enum BusinessTypes {
  bar
  cafe
  hotel
  sportbar
  restaurant
  sports_club
  bar_restaurant
  shopping_center
  recreation_center
}
